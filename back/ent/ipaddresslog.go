// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"
)

// IPAddressLog is the model entity for the IPAddressLog schema.
type IPAddressLog struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IPAddressLogQuery when eager-loading is set.
	Edges               IPAddressLogEdges `json:"edges"`
	post_ip_address_log *string
}

// IPAddressLogEdges holds the relations/edges for other nodes in the graph.
type IPAddressLogEdges struct {
	// PostID holds the value of the post_id edge.
	PostID *Post `json:"post_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostIDOrErr returns the PostID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IPAddressLogEdges) PostIDOrErr() (*Post, error) {
	if e.loadedTypes[0] {
		if e.PostID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.PostID, nil
	}
	return nil, &NotLoadedError{edge: "post_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IPAddressLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ipaddresslog.FieldID, ipaddresslog.FieldIPAddress:
			values[i] = new(sql.NullString)
		case ipaddresslog.FieldCreatedAt, ipaddresslog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ipaddresslog.ForeignKeys[0]: // post_ip_address_log
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type IPAddressLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IPAddressLog fields.
func (ial *IPAddressLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ipaddresslog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ial.ID = value.String
			}
		case ipaddresslog.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				ial.IPAddress = value.String
			}
		case ipaddresslog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ial.CreatedAt = value.Time
			}
		case ipaddresslog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ial.UpdatedAt = value.Time
			}
		case ipaddresslog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_ip_address_log", values[i])
			} else if value.Valid {
				ial.post_ip_address_log = new(string)
				*ial.post_ip_address_log = value.String
			}
		}
	}
	return nil
}

// QueryPostID queries the "post_id" edge of the IPAddressLog entity.
func (ial *IPAddressLog) QueryPostID() *PostQuery {
	return NewIPAddressLogClient(ial.config).QueryPostID(ial)
}

// Update returns a builder for updating this IPAddressLog.
// Note that you need to call IPAddressLog.Unwrap() before calling this method if this IPAddressLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ial *IPAddressLog) Update() *IPAddressLogUpdateOne {
	return NewIPAddressLogClient(ial.config).UpdateOne(ial)
}

// Unwrap unwraps the IPAddressLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ial *IPAddressLog) Unwrap() *IPAddressLog {
	_tx, ok := ial.config.driver.(*txDriver)
	if !ok {
		panic("ent: IPAddressLog is not a transactional entity")
	}
	ial.config.driver = _tx.drv
	return ial
}

// String implements the fmt.Stringer.
func (ial *IPAddressLog) String() string {
	var builder strings.Builder
	builder.WriteString("IPAddressLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ial.ID))
	builder.WriteString("ip_address=")
	builder.WriteString(ial.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ial.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ial.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IPAddressLogs is a parsable slice of IPAddressLog.
type IPAddressLogs []*IPAddressLog
