// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIPAddressLog = "IPAddressLog"
	TypePost         = "Post"
)

// IPAddressLogMutation represents an operation that mutates the IPAddressLog nodes in the graph.
type IPAddressLogMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ip_address    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	post          *int
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*IPAddressLog, error)
	predicates    []predicate.IPAddressLog
}

var _ ent.Mutation = (*IPAddressLogMutation)(nil)

// ipaddresslogOption allows management of the mutation configuration using functional options.
type ipaddresslogOption func(*IPAddressLogMutation)

// newIPAddressLogMutation creates new mutation for the IPAddressLog entity.
func newIPAddressLogMutation(c config, op Op, opts ...ipaddresslogOption) *IPAddressLogMutation {
	m := &IPAddressLogMutation{
		config:        c,
		op:            op,
		typ:           TypeIPAddressLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPAddressLogID sets the ID field of the mutation.
func withIPAddressLogID(id int) ipaddresslogOption {
	return func(m *IPAddressLogMutation) {
		var (
			err   error
			once  sync.Once
			value *IPAddressLog
		)
		m.oldValue = func(ctx context.Context) (*IPAddressLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IPAddressLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIPAddressLog sets the old IPAddressLog of the mutation.
func withIPAddressLog(node *IPAddressLog) ipaddresslogOption {
	return func(m *IPAddressLogMutation) {
		m.oldValue = func(context.Context) (*IPAddressLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPAddressLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPAddressLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPAddressLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IPAddressLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IPAddressLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIPAddress sets the "ip_address" field.
func (m *IPAddressLogMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *IPAddressLogMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the IPAddressLog entity.
// If the IPAddressLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressLogMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *IPAddressLogMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *IPAddressLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IPAddressLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IPAddressLog entity.
// If the IPAddressLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IPAddressLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IPAddressLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IPAddressLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IPAddressLog entity.
// If the IPAddressLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAddressLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IPAddressLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPostID sets the "post" edge to the Post entity by id.
func (m *IPAddressLogMutation) SetPostID(id int) {
	m.post = &id
}

// ClearPost clears the "post" edge to the Post entity.
func (m *IPAddressLogMutation) ClearPost() {
	m.clearedpost = true
}

// PostCleared reports if the "post" edge to the Post entity was cleared.
func (m *IPAddressLogMutation) PostCleared() bool {
	return m.clearedpost
}

// PostID returns the "post" edge ID in the mutation.
func (m *IPAddressLogMutation) PostID() (id int, exists bool) {
	if m.post != nil {
		return *m.post, true
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *IPAddressLogMutation) PostIDs() (ids []int) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *IPAddressLogMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the IPAddressLogMutation builder.
func (m *IPAddressLogMutation) Where(ps ...predicate.IPAddressLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IPAddressLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IPAddressLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IPAddressLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IPAddressLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IPAddressLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IPAddressLog).
func (m *IPAddressLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPAddressLogMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.ip_address != nil {
		fields = append(fields, ipaddresslog.FieldIPAddress)
	}
	if m.created_at != nil {
		fields = append(fields, ipaddresslog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ipaddresslog.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPAddressLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ipaddresslog.FieldIPAddress:
		return m.IPAddress()
	case ipaddresslog.FieldCreatedAt:
		return m.CreatedAt()
	case ipaddresslog.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPAddressLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ipaddresslog.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case ipaddresslog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ipaddresslog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown IPAddressLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAddressLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ipaddresslog.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case ipaddresslog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ipaddresslog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown IPAddressLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPAddressLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPAddressLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAddressLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IPAddressLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPAddressLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPAddressLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPAddressLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IPAddressLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPAddressLogMutation) ResetField(name string) error {
	switch name {
	case ipaddresslog.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case ipaddresslog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ipaddresslog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown IPAddressLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPAddressLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.post != nil {
		edges = append(edges, ipaddresslog.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPAddressLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ipaddresslog.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPAddressLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPAddressLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPAddressLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpost {
		edges = append(edges, ipaddresslog.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPAddressLogMutation) EdgeCleared(name string) bool {
	switch name {
	case ipaddresslog.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPAddressLogMutation) ClearEdge(name string) error {
	switch name {
	case ipaddresslog.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown IPAddressLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPAddressLogMutation) ResetEdge(name string) error {
	switch name {
	case ipaddresslog.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown IPAddressLog edge %s", name)
}

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	gender                *int
	addgender             *int
	introduction          *string
	tweet_url             *string
	tiktok_url            *string
	contact_url           *string
	contact_id            *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	ip_address_log        map[int]struct{}
	removedip_address_log map[int]struct{}
	clearedip_address_log bool
	done                  bool
	oldValue              func(context.Context) (*Post, error)
	predicates            []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id int) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PostMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PostMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PostMutation) ResetName() {
	m.name = nil
}

// SetGender sets the "gender" field.
func (m *PostMutation) SetGender(i int) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *PostMutation) Gender() (r int, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldGender(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *PostMutation) AddGender(i int) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *PostMutation) AddedGender() (r int, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender resets all changes to the "gender" field.
func (m *PostMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetIntroduction sets the "introduction" field.
func (m *PostMutation) SetIntroduction(s string) {
	m.introduction = &s
}

// Introduction returns the value of the "introduction" field in the mutation.
func (m *PostMutation) Introduction() (r string, exists bool) {
	v := m.introduction
	if v == nil {
		return
	}
	return *v, true
}

// OldIntroduction returns the old "introduction" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldIntroduction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIntroduction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIntroduction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntroduction: %w", err)
	}
	return oldValue.Introduction, nil
}

// ClearIntroduction clears the value of the "introduction" field.
func (m *PostMutation) ClearIntroduction() {
	m.introduction = nil
	m.clearedFields[post.FieldIntroduction] = struct{}{}
}

// IntroductionCleared returns if the "introduction" field was cleared in this mutation.
func (m *PostMutation) IntroductionCleared() bool {
	_, ok := m.clearedFields[post.FieldIntroduction]
	return ok
}

// ResetIntroduction resets all changes to the "introduction" field.
func (m *PostMutation) ResetIntroduction() {
	m.introduction = nil
	delete(m.clearedFields, post.FieldIntroduction)
}

// SetTweetURL sets the "tweet_url" field.
func (m *PostMutation) SetTweetURL(s string) {
	m.tweet_url = &s
}

// TweetURL returns the value of the "tweet_url" field in the mutation.
func (m *PostMutation) TweetURL() (r string, exists bool) {
	v := m.tweet_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTweetURL returns the old "tweet_url" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldTweetURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTweetURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTweetURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTweetURL: %w", err)
	}
	return oldValue.TweetURL, nil
}

// ClearTweetURL clears the value of the "tweet_url" field.
func (m *PostMutation) ClearTweetURL() {
	m.tweet_url = nil
	m.clearedFields[post.FieldTweetURL] = struct{}{}
}

// TweetURLCleared returns if the "tweet_url" field was cleared in this mutation.
func (m *PostMutation) TweetURLCleared() bool {
	_, ok := m.clearedFields[post.FieldTweetURL]
	return ok
}

// ResetTweetURL resets all changes to the "tweet_url" field.
func (m *PostMutation) ResetTweetURL() {
	m.tweet_url = nil
	delete(m.clearedFields, post.FieldTweetURL)
}

// SetTiktokURL sets the "tiktok_url" field.
func (m *PostMutation) SetTiktokURL(s string) {
	m.tiktok_url = &s
}

// TiktokURL returns the value of the "tiktok_url" field in the mutation.
func (m *PostMutation) TiktokURL() (r string, exists bool) {
	v := m.tiktok_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTiktokURL returns the old "tiktok_url" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldTiktokURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTiktokURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTiktokURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTiktokURL: %w", err)
	}
	return oldValue.TiktokURL, nil
}

// ClearTiktokURL clears the value of the "tiktok_url" field.
func (m *PostMutation) ClearTiktokURL() {
	m.tiktok_url = nil
	m.clearedFields[post.FieldTiktokURL] = struct{}{}
}

// TiktokURLCleared returns if the "tiktok_url" field was cleared in this mutation.
func (m *PostMutation) TiktokURLCleared() bool {
	_, ok := m.clearedFields[post.FieldTiktokURL]
	return ok
}

// ResetTiktokURL resets all changes to the "tiktok_url" field.
func (m *PostMutation) ResetTiktokURL() {
	m.tiktok_url = nil
	delete(m.clearedFields, post.FieldTiktokURL)
}

// SetContactURL sets the "contact_url" field.
func (m *PostMutation) SetContactURL(s string) {
	m.contact_url = &s
}

// ContactURL returns the value of the "contact_url" field in the mutation.
func (m *PostMutation) ContactURL() (r string, exists bool) {
	v := m.contact_url
	if v == nil {
		return
	}
	return *v, true
}

// OldContactURL returns the old "contact_url" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldContactURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactURL: %w", err)
	}
	return oldValue.ContactURL, nil
}

// ClearContactURL clears the value of the "contact_url" field.
func (m *PostMutation) ClearContactURL() {
	m.contact_url = nil
	m.clearedFields[post.FieldContactURL] = struct{}{}
}

// ContactURLCleared returns if the "contact_url" field was cleared in this mutation.
func (m *PostMutation) ContactURLCleared() bool {
	_, ok := m.clearedFields[post.FieldContactURL]
	return ok
}

// ResetContactURL resets all changes to the "contact_url" field.
func (m *PostMutation) ResetContactURL() {
	m.contact_url = nil
	delete(m.clearedFields, post.FieldContactURL)
}

// SetContactID sets the "contact_id" field.
func (m *PostMutation) SetContactID(s string) {
	m.contact_id = &s
}

// ContactID returns the value of the "contact_id" field in the mutation.
func (m *PostMutation) ContactID() (r string, exists bool) {
	v := m.contact_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContactID returns the old "contact_id" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldContactID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactID: %w", err)
	}
	return oldValue.ContactID, nil
}

// ClearContactID clears the value of the "contact_id" field.
func (m *PostMutation) ClearContactID() {
	m.contact_id = nil
	m.clearedFields[post.FieldContactID] = struct{}{}
}

// ContactIDCleared returns if the "contact_id" field was cleared in this mutation.
func (m *PostMutation) ContactIDCleared() bool {
	_, ok := m.clearedFields[post.FieldContactID]
	return ok
}

// ResetContactID resets all changes to the "contact_id" field.
func (m *PostMutation) ResetContactID() {
	m.contact_id = nil
	delete(m.clearedFields, post.FieldContactID)
}

// SetCreatedAt sets the "created_at" field.
func (m *PostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PostMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PostMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PostMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PostMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddIPAddressLogIDs adds the "ip_address_log" edge to the IPAddressLog entity by ids.
func (m *PostMutation) AddIPAddressLogIDs(ids ...int) {
	if m.ip_address_log == nil {
		m.ip_address_log = make(map[int]struct{})
	}
	for i := range ids {
		m.ip_address_log[ids[i]] = struct{}{}
	}
}

// ClearIPAddressLog clears the "ip_address_log" edge to the IPAddressLog entity.
func (m *PostMutation) ClearIPAddressLog() {
	m.clearedip_address_log = true
}

// IPAddressLogCleared reports if the "ip_address_log" edge to the IPAddressLog entity was cleared.
func (m *PostMutation) IPAddressLogCleared() bool {
	return m.clearedip_address_log
}

// RemoveIPAddressLogIDs removes the "ip_address_log" edge to the IPAddressLog entity by IDs.
func (m *PostMutation) RemoveIPAddressLogIDs(ids ...int) {
	if m.removedip_address_log == nil {
		m.removedip_address_log = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ip_address_log, ids[i])
		m.removedip_address_log[ids[i]] = struct{}{}
	}
}

// RemovedIPAddressLog returns the removed IDs of the "ip_address_log" edge to the IPAddressLog entity.
func (m *PostMutation) RemovedIPAddressLogIDs() (ids []int) {
	for id := range m.removedip_address_log {
		ids = append(ids, id)
	}
	return
}

// IPAddressLogIDs returns the "ip_address_log" edge IDs in the mutation.
func (m *PostMutation) IPAddressLogIDs() (ids []int) {
	for id := range m.ip_address_log {
		ids = append(ids, id)
	}
	return
}

// ResetIPAddressLog resets all changes to the "ip_address_log" edge.
func (m *PostMutation) ResetIPAddressLog() {
	m.ip_address_log = nil
	m.clearedip_address_log = false
	m.removedip_address_log = nil
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Post, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, post.FieldName)
	}
	if m.gender != nil {
		fields = append(fields, post.FieldGender)
	}
	if m.introduction != nil {
		fields = append(fields, post.FieldIntroduction)
	}
	if m.tweet_url != nil {
		fields = append(fields, post.FieldTweetURL)
	}
	if m.tiktok_url != nil {
		fields = append(fields, post.FieldTiktokURL)
	}
	if m.contact_url != nil {
		fields = append(fields, post.FieldContactURL)
	}
	if m.contact_id != nil {
		fields = append(fields, post.FieldContactID)
	}
	if m.created_at != nil {
		fields = append(fields, post.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, post.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldName:
		return m.Name()
	case post.FieldGender:
		return m.Gender()
	case post.FieldIntroduction:
		return m.Introduction()
	case post.FieldTweetURL:
		return m.TweetURL()
	case post.FieldTiktokURL:
		return m.TiktokURL()
	case post.FieldContactURL:
		return m.ContactURL()
	case post.FieldContactID:
		return m.ContactID()
	case post.FieldCreatedAt:
		return m.CreatedAt()
	case post.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldName:
		return m.OldName(ctx)
	case post.FieldGender:
		return m.OldGender(ctx)
	case post.FieldIntroduction:
		return m.OldIntroduction(ctx)
	case post.FieldTweetURL:
		return m.OldTweetURL(ctx)
	case post.FieldTiktokURL:
		return m.OldTiktokURL(ctx)
	case post.FieldContactURL:
		return m.OldContactURL(ctx)
	case post.FieldContactID:
		return m.OldContactID(ctx)
	case post.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case post.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case post.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case post.FieldIntroduction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntroduction(v)
		return nil
	case post.FieldTweetURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTweetURL(v)
		return nil
	case post.FieldTiktokURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTiktokURL(v)
		return nil
	case post.FieldContactURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactURL(v)
		return nil
	case post.FieldContactID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactID(v)
		return nil
	case post.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case post.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	var fields []string
	if m.addgender != nil {
		fields = append(fields, post.FieldGender)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case post.FieldGender:
		return m.AddedGender()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	case post.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(post.FieldIntroduction) {
		fields = append(fields, post.FieldIntroduction)
	}
	if m.FieldCleared(post.FieldTweetURL) {
		fields = append(fields, post.FieldTweetURL)
	}
	if m.FieldCleared(post.FieldTiktokURL) {
		fields = append(fields, post.FieldTiktokURL)
	}
	if m.FieldCleared(post.FieldContactURL) {
		fields = append(fields, post.FieldContactURL)
	}
	if m.FieldCleared(post.FieldContactID) {
		fields = append(fields, post.FieldContactID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	switch name {
	case post.FieldIntroduction:
		m.ClearIntroduction()
		return nil
	case post.FieldTweetURL:
		m.ClearTweetURL()
		return nil
	case post.FieldTiktokURL:
		m.ClearTiktokURL()
		return nil
	case post.FieldContactURL:
		m.ClearContactURL()
		return nil
	case post.FieldContactID:
		m.ClearContactID()
		return nil
	}
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldName:
		m.ResetName()
		return nil
	case post.FieldGender:
		m.ResetGender()
		return nil
	case post.FieldIntroduction:
		m.ResetIntroduction()
		return nil
	case post.FieldTweetURL:
		m.ResetTweetURL()
		return nil
	case post.FieldTiktokURL:
		m.ResetTiktokURL()
		return nil
	case post.FieldContactURL:
		m.ResetContactURL()
		return nil
	case post.FieldContactID:
		m.ResetContactID()
		return nil
	case post.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case post.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ip_address_log != nil {
		edges = append(edges, post.EdgeIPAddressLog)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeIPAddressLog:
		ids := make([]ent.Value, 0, len(m.ip_address_log))
		for id := range m.ip_address_log {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedip_address_log != nil {
		edges = append(edges, post.EdgeIPAddressLog)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeIPAddressLog:
		ids := make([]ent.Value, 0, len(m.removedip_address_log))
		for id := range m.removedip_address_log {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedip_address_log {
		edges = append(edges, post.EdgeIPAddressLog)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	switch name {
	case post.EdgeIPAddressLog:
		return m.clearedip_address_log
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	switch name {
	case post.EdgeIPAddressLog:
		m.ResetIPAddressLog()
		return nil
	}
	return fmt.Errorf("unknown Post edge %s", name)
}
