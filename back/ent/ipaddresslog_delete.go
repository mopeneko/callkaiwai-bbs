// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/predicate"
)

// IPAddressLogDelete is the builder for deleting a IPAddressLog entity.
type IPAddressLogDelete struct {
	config
	hooks    []Hook
	mutation *IPAddressLogMutation
}

// Where appends a list predicates to the IPAddressLogDelete builder.
func (iald *IPAddressLogDelete) Where(ps ...predicate.IPAddressLog) *IPAddressLogDelete {
	iald.mutation.Where(ps...)
	return iald
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iald *IPAddressLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, IPAddressLogMutation](ctx, iald.sqlExec, iald.mutation, iald.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iald *IPAddressLogDelete) ExecX(ctx context.Context) int {
	n, err := iald.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iald *IPAddressLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ipaddresslog.Table, sqlgraph.NewFieldSpec(ipaddresslog.FieldID, field.TypeString))
	if ps := iald.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iald.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iald.mutation.done = true
	return affected, err
}

// IPAddressLogDeleteOne is the builder for deleting a single IPAddressLog entity.
type IPAddressLogDeleteOne struct {
	iald *IPAddressLogDelete
}

// Where appends a list predicates to the IPAddressLogDelete builder.
func (ialdo *IPAddressLogDeleteOne) Where(ps ...predicate.IPAddressLog) *IPAddressLogDeleteOne {
	ialdo.iald.mutation.Where(ps...)
	return ialdo
}

// Exec executes the deletion query.
func (ialdo *IPAddressLogDeleteOne) Exec(ctx context.Context) error {
	n, err := ialdo.iald.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ipaddresslog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ialdo *IPAddressLogDeleteOne) ExecX(ctx context.Context) {
	if err := ialdo.Exec(ctx); err != nil {
		panic(err)
	}
}
