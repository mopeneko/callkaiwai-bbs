// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldIntroduction holds the string denoting the introduction field in the database.
	FieldIntroduction = "introduction"
	// FieldTweetURL holds the string denoting the tweet_url field in the database.
	FieldTweetURL = "tweet_url"
	// FieldTiktokURL holds the string denoting the tiktok_url field in the database.
	FieldTiktokURL = "tiktok_url"
	// FieldContactURL holds the string denoting the contact_url field in the database.
	FieldContactURL = "contact_url"
	// FieldContactID holds the string denoting the contact_id field in the database.
	FieldContactID = "contact_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeIPAddressLog holds the string denoting the ip_address_log edge name in mutations.
	EdgeIPAddressLog = "ip_address_log"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// IPAddressLogTable is the table that holds the ip_address_log relation/edge.
	IPAddressLogTable = "ip_address_logs"
	// IPAddressLogInverseTable is the table name for the IPAddressLog entity.
	// It exists in this package in order to avoid circular dependency with the "ipaddresslog" package.
	IPAddressLogInverseTable = "ip_address_logs"
	// IPAddressLogColumn is the table column denoting the ip_address_log relation/edge.
	IPAddressLogColumn = "post_ip_address_log"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldGender,
	FieldIntroduction,
	FieldTweetURL,
	FieldTiktokURL,
	FieldContactURL,
	FieldContactID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	GenderValidator func(int) error
	// TweetURLValidator is a validator for the "tweet_url" field. It is called by the builders before save.
	TweetURLValidator func(string) error
	// TiktokURLValidator is a validator for the "tiktok_url" field. It is called by the builders before save.
	TiktokURLValidator func(string) error
	// ContactURLValidator is a validator for the "contact_url" field. It is called by the builders before save.
	ContactURLValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)
