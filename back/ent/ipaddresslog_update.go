// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/predicate"
)

// IPAddressLogUpdate is the builder for updating IPAddressLog entities.
type IPAddressLogUpdate struct {
	config
	hooks    []Hook
	mutation *IPAddressLogMutation
}

// Where appends a list predicates to the IPAddressLogUpdate builder.
func (ialu *IPAddressLogUpdate) Where(ps ...predicate.IPAddressLog) *IPAddressLogUpdate {
	ialu.mutation.Where(ps...)
	return ialu
}

// SetIPAddress sets the "ip_address" field.
func (ialu *IPAddressLogUpdate) SetIPAddress(s string) *IPAddressLogUpdate {
	ialu.mutation.SetIPAddress(s)
	return ialu
}

// SetUpdatedAt sets the "updated_at" field.
func (ialu *IPAddressLogUpdate) SetUpdatedAt(t time.Time) *IPAddressLogUpdate {
	ialu.mutation.SetUpdatedAt(t)
	return ialu
}

// SetPostIDID sets the "post_id" edge to the Post entity by ID.
func (ialu *IPAddressLogUpdate) SetPostIDID(id string) *IPAddressLogUpdate {
	ialu.mutation.SetPostIDID(id)
	return ialu
}

// SetPostID sets the "post_id" edge to the Post entity.
func (ialu *IPAddressLogUpdate) SetPostID(p *Post) *IPAddressLogUpdate {
	return ialu.SetPostIDID(p.ID)
}

// Mutation returns the IPAddressLogMutation object of the builder.
func (ialu *IPAddressLogUpdate) Mutation() *IPAddressLogMutation {
	return ialu.mutation
}

// ClearPostID clears the "post_id" edge to the Post entity.
func (ialu *IPAddressLogUpdate) ClearPostID() *IPAddressLogUpdate {
	ialu.mutation.ClearPostID()
	return ialu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ialu *IPAddressLogUpdate) Save(ctx context.Context) (int, error) {
	ialu.defaults()
	return withHooks[int, IPAddressLogMutation](ctx, ialu.sqlSave, ialu.mutation, ialu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ialu *IPAddressLogUpdate) SaveX(ctx context.Context) int {
	affected, err := ialu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ialu *IPAddressLogUpdate) Exec(ctx context.Context) error {
	_, err := ialu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ialu *IPAddressLogUpdate) ExecX(ctx context.Context) {
	if err := ialu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ialu *IPAddressLogUpdate) defaults() {
	if _, ok := ialu.mutation.UpdatedAt(); !ok {
		v := ipaddresslog.UpdateDefaultUpdatedAt()
		ialu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ialu *IPAddressLogUpdate) check() error {
	if v, ok := ialu.mutation.IPAddress(); ok {
		if err := ipaddresslog.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "IPAddressLog.ip_address": %w`, err)}
		}
	}
	if _, ok := ialu.mutation.PostIDID(); ialu.mutation.PostIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IPAddressLog.post_id"`)
	}
	return nil
}

func (ialu *IPAddressLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ialu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipaddresslog.Table, ipaddresslog.Columns, sqlgraph.NewFieldSpec(ipaddresslog.FieldID, field.TypeString))
	if ps := ialu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ialu.mutation.IPAddress(); ok {
		_spec.SetField(ipaddresslog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := ialu.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaddresslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if ialu.mutation.PostIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipaddresslog.PostIDTable,
			Columns: []string{ipaddresslog.PostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ialu.mutation.PostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipaddresslog.PostIDTable,
			Columns: []string{ipaddresslog.PostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ialu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddresslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ialu.mutation.done = true
	return n, nil
}

// IPAddressLogUpdateOne is the builder for updating a single IPAddressLog entity.
type IPAddressLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPAddressLogMutation
}

// SetIPAddress sets the "ip_address" field.
func (ialuo *IPAddressLogUpdateOne) SetIPAddress(s string) *IPAddressLogUpdateOne {
	ialuo.mutation.SetIPAddress(s)
	return ialuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ialuo *IPAddressLogUpdateOne) SetUpdatedAt(t time.Time) *IPAddressLogUpdateOne {
	ialuo.mutation.SetUpdatedAt(t)
	return ialuo
}

// SetPostIDID sets the "post_id" edge to the Post entity by ID.
func (ialuo *IPAddressLogUpdateOne) SetPostIDID(id string) *IPAddressLogUpdateOne {
	ialuo.mutation.SetPostIDID(id)
	return ialuo
}

// SetPostID sets the "post_id" edge to the Post entity.
func (ialuo *IPAddressLogUpdateOne) SetPostID(p *Post) *IPAddressLogUpdateOne {
	return ialuo.SetPostIDID(p.ID)
}

// Mutation returns the IPAddressLogMutation object of the builder.
func (ialuo *IPAddressLogUpdateOne) Mutation() *IPAddressLogMutation {
	return ialuo.mutation
}

// ClearPostID clears the "post_id" edge to the Post entity.
func (ialuo *IPAddressLogUpdateOne) ClearPostID() *IPAddressLogUpdateOne {
	ialuo.mutation.ClearPostID()
	return ialuo
}

// Where appends a list predicates to the IPAddressLogUpdate builder.
func (ialuo *IPAddressLogUpdateOne) Where(ps ...predicate.IPAddressLog) *IPAddressLogUpdateOne {
	ialuo.mutation.Where(ps...)
	return ialuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ialuo *IPAddressLogUpdateOne) Select(field string, fields ...string) *IPAddressLogUpdateOne {
	ialuo.fields = append([]string{field}, fields...)
	return ialuo
}

// Save executes the query and returns the updated IPAddressLog entity.
func (ialuo *IPAddressLogUpdateOne) Save(ctx context.Context) (*IPAddressLog, error) {
	ialuo.defaults()
	return withHooks[*IPAddressLog, IPAddressLogMutation](ctx, ialuo.sqlSave, ialuo.mutation, ialuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ialuo *IPAddressLogUpdateOne) SaveX(ctx context.Context) *IPAddressLog {
	node, err := ialuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ialuo *IPAddressLogUpdateOne) Exec(ctx context.Context) error {
	_, err := ialuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ialuo *IPAddressLogUpdateOne) ExecX(ctx context.Context) {
	if err := ialuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ialuo *IPAddressLogUpdateOne) defaults() {
	if _, ok := ialuo.mutation.UpdatedAt(); !ok {
		v := ipaddresslog.UpdateDefaultUpdatedAt()
		ialuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ialuo *IPAddressLogUpdateOne) check() error {
	if v, ok := ialuo.mutation.IPAddress(); ok {
		if err := ipaddresslog.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "IPAddressLog.ip_address": %w`, err)}
		}
	}
	if _, ok := ialuo.mutation.PostIDID(); ialuo.mutation.PostIDCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "IPAddressLog.post_id"`)
	}
	return nil
}

func (ialuo *IPAddressLogUpdateOne) sqlSave(ctx context.Context) (_node *IPAddressLog, err error) {
	if err := ialuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipaddresslog.Table, ipaddresslog.Columns, sqlgraph.NewFieldSpec(ipaddresslog.FieldID, field.TypeString))
	id, ok := ialuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IPAddressLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ialuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipaddresslog.FieldID)
		for _, f := range fields {
			if !ipaddresslog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipaddresslog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ialuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ialuo.mutation.IPAddress(); ok {
		_spec.SetField(ipaddresslog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := ialuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaddresslog.FieldUpdatedAt, field.TypeTime, value)
	}
	if ialuo.mutation.PostIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipaddresslog.PostIDTable,
			Columns: []string{ipaddresslog.PostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ialuo.mutation.PostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipaddresslog.PostIDTable,
			Columns: []string{ipaddresslog.PostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPAddressLog{config: ialuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ialuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddresslog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ialuo.mutation.done = true
	return _node, nil
}
