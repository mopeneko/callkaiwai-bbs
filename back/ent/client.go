// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/mopeneko/callkaiwai-bbs/back/ent/migrate"

	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// IPAddressLog is the client for interacting with the IPAddressLog builders.
	IPAddressLog *IPAddressLogClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.IPAddressLog = NewIPAddressLogClient(c.config)
	c.Post = NewPostClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		IPAddressLog: NewIPAddressLogClient(cfg),
		Post:         NewPostClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		IPAddressLog: NewIPAddressLogClient(cfg),
		Post:         NewPostClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		IPAddressLog.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.IPAddressLog.Use(hooks...)
	c.Post.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.IPAddressLog.Intercept(interceptors...)
	c.Post.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *IPAddressLogMutation:
		return c.IPAddressLog.mutate(ctx, m)
	case *PostMutation:
		return c.Post.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// IPAddressLogClient is a client for the IPAddressLog schema.
type IPAddressLogClient struct {
	config
}

// NewIPAddressLogClient returns a client for the IPAddressLog from the given config.
func NewIPAddressLogClient(c config) *IPAddressLogClient {
	return &IPAddressLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ipaddresslog.Hooks(f(g(h())))`.
func (c *IPAddressLogClient) Use(hooks ...Hook) {
	c.hooks.IPAddressLog = append(c.hooks.IPAddressLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ipaddresslog.Intercept(f(g(h())))`.
func (c *IPAddressLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.IPAddressLog = append(c.inters.IPAddressLog, interceptors...)
}

// Create returns a builder for creating a IPAddressLog entity.
func (c *IPAddressLogClient) Create() *IPAddressLogCreate {
	mutation := newIPAddressLogMutation(c.config, OpCreate)
	return &IPAddressLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IPAddressLog entities.
func (c *IPAddressLogClient) CreateBulk(builders ...*IPAddressLogCreate) *IPAddressLogCreateBulk {
	return &IPAddressLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IPAddressLog.
func (c *IPAddressLogClient) Update() *IPAddressLogUpdate {
	mutation := newIPAddressLogMutation(c.config, OpUpdate)
	return &IPAddressLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPAddressLogClient) UpdateOne(ial *IPAddressLog) *IPAddressLogUpdateOne {
	mutation := newIPAddressLogMutation(c.config, OpUpdateOne, withIPAddressLog(ial))
	return &IPAddressLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPAddressLogClient) UpdateOneID(id int) *IPAddressLogUpdateOne {
	mutation := newIPAddressLogMutation(c.config, OpUpdateOne, withIPAddressLogID(id))
	return &IPAddressLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IPAddressLog.
func (c *IPAddressLogClient) Delete() *IPAddressLogDelete {
	mutation := newIPAddressLogMutation(c.config, OpDelete)
	return &IPAddressLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IPAddressLogClient) DeleteOne(ial *IPAddressLog) *IPAddressLogDeleteOne {
	return c.DeleteOneID(ial.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IPAddressLogClient) DeleteOneID(id int) *IPAddressLogDeleteOne {
	builder := c.Delete().Where(ipaddresslog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPAddressLogDeleteOne{builder}
}

// Query returns a query builder for IPAddressLog.
func (c *IPAddressLogClient) Query() *IPAddressLogQuery {
	return &IPAddressLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIPAddressLog},
		inters: c.Interceptors(),
	}
}

// Get returns a IPAddressLog entity by its id.
func (c *IPAddressLogClient) Get(ctx context.Context, id int) (*IPAddressLog, error) {
	return c.Query().Where(ipaddresslog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPAddressLogClient) GetX(ctx context.Context, id int) *IPAddressLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a IPAddressLog.
func (c *IPAddressLogClient) QueryPost(ial *IPAddressLog) *PostQuery {
	query := (&PostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ial.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ipaddresslog.Table, ipaddresslog.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ipaddresslog.PostTable, ipaddresslog.PostColumn),
		)
		fromV = sqlgraph.Neighbors(ial.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IPAddressLogClient) Hooks() []Hook {
	return c.hooks.IPAddressLog
}

// Interceptors returns the client interceptors.
func (c *IPAddressLogClient) Interceptors() []Interceptor {
	return c.inters.IPAddressLog
}

func (c *IPAddressLogClient) mutate(ctx context.Context, m *IPAddressLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IPAddressLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IPAddressLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IPAddressLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IPAddressLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IPAddressLog mutation op: %q", m.Op())
	}
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `post.Intercept(f(g(h())))`.
func (c *PostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Post = append(c.inters.Post, interceptors...)
}

// Create returns a builder for creating a Post entity.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(po *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(po))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id int) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PostClient) DeleteOne(po *Post) *PostDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PostClient) DeleteOneID(id int) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePost},
		inters: c.Interceptors(),
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id int) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id int) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIPAddressLog queries the ip_address_log edge of a Post.
func (c *PostClient) QueryIPAddressLog(po *Post) *IPAddressLogQuery {
	query := (&IPAddressLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(ipaddresslog.Table, ipaddresslog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.IPAddressLogTable, post.IPAddressLogColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// Interceptors returns the client interceptors.
func (c *PostClient) Interceptors() []Interceptor {
	return c.inters.Post
}

func (c *PostClient) mutate(ctx context.Context, m *PostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Post mutation op: %q", m.Op())
	}
}
