// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/predicate"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PostUpdate) SetName(s string) *PostUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetGender sets the "gender" field.
func (pu *PostUpdate) SetGender(i int) *PostUpdate {
	pu.mutation.ResetGender()
	pu.mutation.SetGender(i)
	return pu
}

// AddGender adds i to the "gender" field.
func (pu *PostUpdate) AddGender(i int) *PostUpdate {
	pu.mutation.AddGender(i)
	return pu
}

// SetIntroduction sets the "introduction" field.
func (pu *PostUpdate) SetIntroduction(s string) *PostUpdate {
	pu.mutation.SetIntroduction(s)
	return pu
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIntroduction(s *string) *PostUpdate {
	if s != nil {
		pu.SetIntroduction(*s)
	}
	return pu
}

// ClearIntroduction clears the value of the "introduction" field.
func (pu *PostUpdate) ClearIntroduction() *PostUpdate {
	pu.mutation.ClearIntroduction()
	return pu
}

// SetTweetURL sets the "tweet_url" field.
func (pu *PostUpdate) SetTweetURL(s string) *PostUpdate {
	pu.mutation.SetTweetURL(s)
	return pu
}

// SetNillableTweetURL sets the "tweet_url" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTweetURL(s *string) *PostUpdate {
	if s != nil {
		pu.SetTweetURL(*s)
	}
	return pu
}

// ClearTweetURL clears the value of the "tweet_url" field.
func (pu *PostUpdate) ClearTweetURL() *PostUpdate {
	pu.mutation.ClearTweetURL()
	return pu
}

// SetTiktokURL sets the "tiktok_url" field.
func (pu *PostUpdate) SetTiktokURL(s string) *PostUpdate {
	pu.mutation.SetTiktokURL(s)
	return pu
}

// SetNillableTiktokURL sets the "tiktok_url" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTiktokURL(s *string) *PostUpdate {
	if s != nil {
		pu.SetTiktokURL(*s)
	}
	return pu
}

// ClearTiktokURL clears the value of the "tiktok_url" field.
func (pu *PostUpdate) ClearTiktokURL() *PostUpdate {
	pu.mutation.ClearTiktokURL()
	return pu
}

// SetContactURL sets the "contact_url" field.
func (pu *PostUpdate) SetContactURL(s string) *PostUpdate {
	pu.mutation.SetContactURL(s)
	return pu
}

// SetNillableContactURL sets the "contact_url" field if the given value is not nil.
func (pu *PostUpdate) SetNillableContactURL(s *string) *PostUpdate {
	if s != nil {
		pu.SetContactURL(*s)
	}
	return pu
}

// ClearContactURL clears the value of the "contact_url" field.
func (pu *PostUpdate) ClearContactURL() *PostUpdate {
	pu.mutation.ClearContactURL()
	return pu
}

// SetContactID sets the "contact_id" field.
func (pu *PostUpdate) SetContactID(s string) *PostUpdate {
	pu.mutation.SetContactID(s)
	return pu
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (pu *PostUpdate) SetNillableContactID(s *string) *PostUpdate {
	if s != nil {
		pu.SetContactID(*s)
	}
	return pu
}

// ClearContactID clears the value of the "contact_id" field.
func (pu *PostUpdate) ClearContactID() *PostUpdate {
	pu.mutation.ClearContactID()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddIPAddressLogIDs adds the "ip_address_log" edge to the IPAddressLog entity by IDs.
func (pu *PostUpdate) AddIPAddressLogIDs(ids ...string) *PostUpdate {
	pu.mutation.AddIPAddressLogIDs(ids...)
	return pu
}

// AddIPAddressLog adds the "ip_address_log" edges to the IPAddressLog entity.
func (pu *PostUpdate) AddIPAddressLog(i ...*IPAddressLog) *PostUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddIPAddressLogIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearIPAddressLog clears all "ip_address_log" edges to the IPAddressLog entity.
func (pu *PostUpdate) ClearIPAddressLog() *PostUpdate {
	pu.mutation.ClearIPAddressLog()
	return pu
}

// RemoveIPAddressLogIDs removes the "ip_address_log" edge to IPAddressLog entities by IDs.
func (pu *PostUpdate) RemoveIPAddressLogIDs(ids ...string) *PostUpdate {
	pu.mutation.RemoveIPAddressLogIDs(ids...)
	return pu
}

// RemoveIPAddressLog removes "ip_address_log" edges to IPAddressLog entities.
func (pu *PostUpdate) RemoveIPAddressLog(i ...*IPAddressLog) *PostUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveIPAddressLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks[int, PostMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Gender(); ok {
		if err := post.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Post.gender": %w`, err)}
		}
	}
	if v, ok := pu.mutation.TweetURL(); ok {
		if err := post.TweetURLValidator(v); err != nil {
			return &ValidationError{Name: "tweet_url", err: fmt.Errorf(`ent: validator failed for field "Post.tweet_url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.TiktokURL(); ok {
		if err := post.TiktokURLValidator(v); err != nil {
			return &ValidationError{Name: "tiktok_url", err: fmt.Errorf(`ent: validator failed for field "Post.tiktok_url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ContactURL(); ok {
		if err := post.ContactURLValidator(v); err != nil {
			return &ValidationError{Name: "contact_url", err: fmt.Errorf(`ent: validator failed for field "Post.contact_url": %w`, err)}
		}
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(post.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(post.FieldGender, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGender(); ok {
		_spec.AddField(post.FieldGender, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Introduction(); ok {
		_spec.SetField(post.FieldIntroduction, field.TypeString, value)
	}
	if pu.mutation.IntroductionCleared() {
		_spec.ClearField(post.FieldIntroduction, field.TypeString)
	}
	if value, ok := pu.mutation.TweetURL(); ok {
		_spec.SetField(post.FieldTweetURL, field.TypeString, value)
	}
	if pu.mutation.TweetURLCleared() {
		_spec.ClearField(post.FieldTweetURL, field.TypeString)
	}
	if value, ok := pu.mutation.TiktokURL(); ok {
		_spec.SetField(post.FieldTiktokURL, field.TypeString, value)
	}
	if pu.mutation.TiktokURLCleared() {
		_spec.ClearField(post.FieldTiktokURL, field.TypeString)
	}
	if value, ok := pu.mutation.ContactURL(); ok {
		_spec.SetField(post.FieldContactURL, field.TypeString, value)
	}
	if pu.mutation.ContactURLCleared() {
		_spec.ClearField(post.FieldContactURL, field.TypeString)
	}
	if value, ok := pu.mutation.ContactID(); ok {
		_spec.SetField(post.FieldContactID, field.TypeString, value)
	}
	if pu.mutation.ContactIDCleared() {
		_spec.ClearField(post.FieldContactID, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.IPAddressLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.IPAddressLogTable,
			Columns: []string{post.IPAddressLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ipaddresslog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedIPAddressLogIDs(); len(nodes) > 0 && !pu.mutation.IPAddressLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.IPAddressLogTable,
			Columns: []string{post.IPAddressLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ipaddresslog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.IPAddressLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.IPAddressLogTable,
			Columns: []string{post.IPAddressLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ipaddresslog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetName sets the "name" field.
func (puo *PostUpdateOne) SetName(s string) *PostUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetGender sets the "gender" field.
func (puo *PostUpdateOne) SetGender(i int) *PostUpdateOne {
	puo.mutation.ResetGender()
	puo.mutation.SetGender(i)
	return puo
}

// AddGender adds i to the "gender" field.
func (puo *PostUpdateOne) AddGender(i int) *PostUpdateOne {
	puo.mutation.AddGender(i)
	return puo
}

// SetIntroduction sets the "introduction" field.
func (puo *PostUpdateOne) SetIntroduction(s string) *PostUpdateOne {
	puo.mutation.SetIntroduction(s)
	return puo
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIntroduction(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetIntroduction(*s)
	}
	return puo
}

// ClearIntroduction clears the value of the "introduction" field.
func (puo *PostUpdateOne) ClearIntroduction() *PostUpdateOne {
	puo.mutation.ClearIntroduction()
	return puo
}

// SetTweetURL sets the "tweet_url" field.
func (puo *PostUpdateOne) SetTweetURL(s string) *PostUpdateOne {
	puo.mutation.SetTweetURL(s)
	return puo
}

// SetNillableTweetURL sets the "tweet_url" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTweetURL(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTweetURL(*s)
	}
	return puo
}

// ClearTweetURL clears the value of the "tweet_url" field.
func (puo *PostUpdateOne) ClearTweetURL() *PostUpdateOne {
	puo.mutation.ClearTweetURL()
	return puo
}

// SetTiktokURL sets the "tiktok_url" field.
func (puo *PostUpdateOne) SetTiktokURL(s string) *PostUpdateOne {
	puo.mutation.SetTiktokURL(s)
	return puo
}

// SetNillableTiktokURL sets the "tiktok_url" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTiktokURL(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTiktokURL(*s)
	}
	return puo
}

// ClearTiktokURL clears the value of the "tiktok_url" field.
func (puo *PostUpdateOne) ClearTiktokURL() *PostUpdateOne {
	puo.mutation.ClearTiktokURL()
	return puo
}

// SetContactURL sets the "contact_url" field.
func (puo *PostUpdateOne) SetContactURL(s string) *PostUpdateOne {
	puo.mutation.SetContactURL(s)
	return puo
}

// SetNillableContactURL sets the "contact_url" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableContactURL(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetContactURL(*s)
	}
	return puo
}

// ClearContactURL clears the value of the "contact_url" field.
func (puo *PostUpdateOne) ClearContactURL() *PostUpdateOne {
	puo.mutation.ClearContactURL()
	return puo
}

// SetContactID sets the "contact_id" field.
func (puo *PostUpdateOne) SetContactID(s string) *PostUpdateOne {
	puo.mutation.SetContactID(s)
	return puo
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableContactID(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetContactID(*s)
	}
	return puo
}

// ClearContactID clears the value of the "contact_id" field.
func (puo *PostUpdateOne) ClearContactID() *PostUpdateOne {
	puo.mutation.ClearContactID()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddIPAddressLogIDs adds the "ip_address_log" edge to the IPAddressLog entity by IDs.
func (puo *PostUpdateOne) AddIPAddressLogIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddIPAddressLogIDs(ids...)
	return puo
}

// AddIPAddressLog adds the "ip_address_log" edges to the IPAddressLog entity.
func (puo *PostUpdateOne) AddIPAddressLog(i ...*IPAddressLog) *PostUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddIPAddressLogIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearIPAddressLog clears all "ip_address_log" edges to the IPAddressLog entity.
func (puo *PostUpdateOne) ClearIPAddressLog() *PostUpdateOne {
	puo.mutation.ClearIPAddressLog()
	return puo
}

// RemoveIPAddressLogIDs removes the "ip_address_log" edge to IPAddressLog entities by IDs.
func (puo *PostUpdateOne) RemoveIPAddressLogIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemoveIPAddressLogIDs(ids...)
	return puo
}

// RemoveIPAddressLog removes "ip_address_log" edges to IPAddressLog entities.
func (puo *PostUpdateOne) RemoveIPAddressLog(i ...*IPAddressLog) *PostUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveIPAddressLogIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks[*Post, PostMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Gender(); ok {
		if err := post.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Post.gender": %w`, err)}
		}
	}
	if v, ok := puo.mutation.TweetURL(); ok {
		if err := post.TweetURLValidator(v); err != nil {
			return &ValidationError{Name: "tweet_url", err: fmt.Errorf(`ent: validator failed for field "Post.tweet_url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.TiktokURL(); ok {
		if err := post.TiktokURLValidator(v); err != nil {
			return &ValidationError{Name: "tiktok_url", err: fmt.Errorf(`ent: validator failed for field "Post.tiktok_url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ContactURL(); ok {
		if err := post.ContactURLValidator(v); err != nil {
			return &ValidationError{Name: "contact_url", err: fmt.Errorf(`ent: validator failed for field "Post.contact_url": %w`, err)}
		}
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(post.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(post.FieldGender, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGender(); ok {
		_spec.AddField(post.FieldGender, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Introduction(); ok {
		_spec.SetField(post.FieldIntroduction, field.TypeString, value)
	}
	if puo.mutation.IntroductionCleared() {
		_spec.ClearField(post.FieldIntroduction, field.TypeString)
	}
	if value, ok := puo.mutation.TweetURL(); ok {
		_spec.SetField(post.FieldTweetURL, field.TypeString, value)
	}
	if puo.mutation.TweetURLCleared() {
		_spec.ClearField(post.FieldTweetURL, field.TypeString)
	}
	if value, ok := puo.mutation.TiktokURL(); ok {
		_spec.SetField(post.FieldTiktokURL, field.TypeString, value)
	}
	if puo.mutation.TiktokURLCleared() {
		_spec.ClearField(post.FieldTiktokURL, field.TypeString)
	}
	if value, ok := puo.mutation.ContactURL(); ok {
		_spec.SetField(post.FieldContactURL, field.TypeString, value)
	}
	if puo.mutation.ContactURLCleared() {
		_spec.ClearField(post.FieldContactURL, field.TypeString)
	}
	if value, ok := puo.mutation.ContactID(); ok {
		_spec.SetField(post.FieldContactID, field.TypeString, value)
	}
	if puo.mutation.ContactIDCleared() {
		_spec.ClearField(post.FieldContactID, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.IPAddressLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.IPAddressLogTable,
			Columns: []string{post.IPAddressLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ipaddresslog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedIPAddressLogIDs(); len(nodes) > 0 && !puo.mutation.IPAddressLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.IPAddressLogTable,
			Columns: []string{post.IPAddressLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ipaddresslog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.IPAddressLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.IPAddressLogTable,
			Columns: []string{post.IPAddressLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ipaddresslog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
