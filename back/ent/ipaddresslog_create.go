// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/ipaddresslog"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"
)

// IPAddressLogCreate is the builder for creating a IPAddressLog entity.
type IPAddressLogCreate struct {
	config
	mutation *IPAddressLogMutation
	hooks    []Hook
}

// SetIPAddress sets the "ip_address" field.
func (ialc *IPAddressLogCreate) SetIPAddress(s string) *IPAddressLogCreate {
	ialc.mutation.SetIPAddress(s)
	return ialc
}

// SetCreatedAt sets the "created_at" field.
func (ialc *IPAddressLogCreate) SetCreatedAt(t time.Time) *IPAddressLogCreate {
	ialc.mutation.SetCreatedAt(t)
	return ialc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ialc *IPAddressLogCreate) SetNillableCreatedAt(t *time.Time) *IPAddressLogCreate {
	if t != nil {
		ialc.SetCreatedAt(*t)
	}
	return ialc
}

// SetUpdatedAt sets the "updated_at" field.
func (ialc *IPAddressLogCreate) SetUpdatedAt(t time.Time) *IPAddressLogCreate {
	ialc.mutation.SetUpdatedAt(t)
	return ialc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ialc *IPAddressLogCreate) SetNillableUpdatedAt(t *time.Time) *IPAddressLogCreate {
	if t != nil {
		ialc.SetUpdatedAt(*t)
	}
	return ialc
}

// SetID sets the "id" field.
func (ialc *IPAddressLogCreate) SetID(s string) *IPAddressLogCreate {
	ialc.mutation.SetID(s)
	return ialc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ialc *IPAddressLogCreate) SetNillableID(s *string) *IPAddressLogCreate {
	if s != nil {
		ialc.SetID(*s)
	}
	return ialc
}

// SetPostIDID sets the "post_id" edge to the Post entity by ID.
func (ialc *IPAddressLogCreate) SetPostIDID(id string) *IPAddressLogCreate {
	ialc.mutation.SetPostIDID(id)
	return ialc
}

// SetPostID sets the "post_id" edge to the Post entity.
func (ialc *IPAddressLogCreate) SetPostID(p *Post) *IPAddressLogCreate {
	return ialc.SetPostIDID(p.ID)
}

// Mutation returns the IPAddressLogMutation object of the builder.
func (ialc *IPAddressLogCreate) Mutation() *IPAddressLogMutation {
	return ialc.mutation
}

// Save creates the IPAddressLog in the database.
func (ialc *IPAddressLogCreate) Save(ctx context.Context) (*IPAddressLog, error) {
	ialc.defaults()
	return withHooks[*IPAddressLog, IPAddressLogMutation](ctx, ialc.sqlSave, ialc.mutation, ialc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ialc *IPAddressLogCreate) SaveX(ctx context.Context) *IPAddressLog {
	v, err := ialc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ialc *IPAddressLogCreate) Exec(ctx context.Context) error {
	_, err := ialc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ialc *IPAddressLogCreate) ExecX(ctx context.Context) {
	if err := ialc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ialc *IPAddressLogCreate) defaults() {
	if _, ok := ialc.mutation.CreatedAt(); !ok {
		v := ipaddresslog.DefaultCreatedAt()
		ialc.mutation.SetCreatedAt(v)
	}
	if _, ok := ialc.mutation.UpdatedAt(); !ok {
		v := ipaddresslog.DefaultUpdatedAt()
		ialc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ialc.mutation.ID(); !ok {
		v := ipaddresslog.DefaultID()
		ialc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ialc *IPAddressLogCreate) check() error {
	if _, ok := ialc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "IPAddressLog.ip_address"`)}
	}
	if v, ok := ialc.mutation.IPAddress(); ok {
		if err := ipaddresslog.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "IPAddressLog.ip_address": %w`, err)}
		}
	}
	if _, ok := ialc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IPAddressLog.created_at"`)}
	}
	if _, ok := ialc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IPAddressLog.updated_at"`)}
	}
	if _, ok := ialc.mutation.PostIDID(); !ok {
		return &ValidationError{Name: "post_id", err: errors.New(`ent: missing required edge "IPAddressLog.post_id"`)}
	}
	return nil
}

func (ialc *IPAddressLogCreate) sqlSave(ctx context.Context) (*IPAddressLog, error) {
	if err := ialc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ialc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ialc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected IPAddressLog.ID type: %T", _spec.ID.Value)
		}
	}
	ialc.mutation.id = &_node.ID
	ialc.mutation.done = true
	return _node, nil
}

func (ialc *IPAddressLogCreate) createSpec() (*IPAddressLog, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddressLog{config: ialc.config}
		_spec = sqlgraph.NewCreateSpec(ipaddresslog.Table, sqlgraph.NewFieldSpec(ipaddresslog.FieldID, field.TypeString))
	)
	if id, ok := ialc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ialc.mutation.IPAddress(); ok {
		_spec.SetField(ipaddresslog.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := ialc.mutation.CreatedAt(); ok {
		_spec.SetField(ipaddresslog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ialc.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaddresslog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ialc.mutation.PostIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ipaddresslog.PostIDTable,
			Columns: []string{ipaddresslog.PostIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_ip_address_log = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPAddressLogCreateBulk is the builder for creating many IPAddressLog entities in bulk.
type IPAddressLogCreateBulk struct {
	config
	builders []*IPAddressLogCreate
}

// Save creates the IPAddressLog entities in the database.
func (ialcb *IPAddressLogCreateBulk) Save(ctx context.Context) ([]*IPAddressLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ialcb.builders))
	nodes := make([]*IPAddressLog, len(ialcb.builders))
	mutators := make([]Mutator, len(ialcb.builders))
	for i := range ialcb.builders {
		func(i int, root context.Context) {
			builder := ialcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ialcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ialcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ialcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ialcb *IPAddressLogCreateBulk) SaveX(ctx context.Context) []*IPAddressLog {
	v, err := ialcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ialcb *IPAddressLogCreateBulk) Exec(ctx context.Context) error {
	_, err := ialcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ialcb *IPAddressLogCreateBulk) ExecX(ctx context.Context) {
	if err := ialcb.Exec(ctx); err != nil {
		panic(err)
	}
}
