// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mopeneko/callkaiwai-bbs/back/ent/post"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender int `json:"gender,omitempty"`
	// Introduction holds the value of the "introduction" field.
	Introduction string `json:"introduction,omitempty"`
	// TweetURL holds the value of the "tweet_url" field.
	TweetURL string `json:"tweet_url,omitempty"`
	// TiktokURL holds the value of the "tiktok_url" field.
	TiktokURL string `json:"tiktok_url,omitempty"`
	// ContactURL holds the value of the "contact_url" field.
	ContactURL string `json:"contact_url,omitempty"`
	// ContactID holds the value of the "contact_id" field.
	ContactID string `json:"contact_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges PostEdges `json:"edges"`
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// IPAddressLog holds the value of the ip_address_log edge.
	IPAddressLog []*IPAddressLog `json:"ip_address_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IPAddressLogOrErr returns the IPAddressLog value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) IPAddressLogOrErr() ([]*IPAddressLog, error) {
	if e.loadedTypes[0] {
		return e.IPAddressLog, nil
	}
	return nil, &NotLoadedError{edge: "ip_address_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldID, post.FieldGender:
			values[i] = new(sql.NullInt64)
		case post.FieldName, post.FieldIntroduction, post.FieldTweetURL, post.FieldTiktokURL, post.FieldContactURL, post.FieldContactID:
			values[i] = new(sql.NullString)
		case post.FieldCreatedAt, post.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Post", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case post.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				po.Gender = int(value.Int64)
			}
		case post.FieldIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduction", values[i])
			} else if value.Valid {
				po.Introduction = value.String
			}
		case post.FieldTweetURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tweet_url", values[i])
			} else if value.Valid {
				po.TweetURL = value.String
			}
		case post.FieldTiktokURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tiktok_url", values[i])
			} else if value.Valid {
				po.TiktokURL = value.String
			}
		case post.FieldContactURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_url", values[i])
			} else if value.Valid {
				po.ContactURL = value.String
			}
		case post.FieldContactID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_id", values[i])
			} else if value.Valid {
				po.ContactID = value.String
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryIPAddressLog queries the "ip_address_log" edge of the Post entity.
func (po *Post) QueryIPAddressLog() *IPAddressLogQuery {
	return NewPostClient(po.config).QueryIPAddressLog(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return NewPostClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", po.Gender))
	builder.WriteString(", ")
	builder.WriteString("introduction=")
	builder.WriteString(po.Introduction)
	builder.WriteString(", ")
	builder.WriteString("tweet_url=")
	builder.WriteString(po.TweetURL)
	builder.WriteString(", ")
	builder.WriteString("tiktok_url=")
	builder.WriteString(po.TiktokURL)
	builder.WriteString(", ")
	builder.WriteString("contact_url=")
	builder.WriteString(po.ContactURL)
	builder.WriteString(", ")
	builder.WriteString("contact_id=")
	builder.WriteString(po.ContactID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post
